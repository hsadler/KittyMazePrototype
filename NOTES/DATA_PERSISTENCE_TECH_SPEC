

DATA PERSISTENCE TECH SPEC


Asset Pipeline and Game Consumption:
	1. Kitty and Accessory assets added to game /Resources directory
	2. Game does a start-up check for new assets and updates persistent JSON datastore
	3. JSON datastore serves as source-of-truth thereafter
	4. Client lookups for Kitties, Accessories, selections, and unlock statuses are
		done through the JSON datastore


Classes and Definitions

	// Data access layer. Keep full data in memory and sych to JSON files.
	KittyData
		// INTERFACE
		GetModels() : List<KittyModel>
		SaveModel(KittyModel model) : bool
		// IMPLEMENTATION
		LoadRecords()
		SynchRecordsToJsonFile()

	AccessoryData
		// INTERFACE
		GetModels() : List<AccessoryModel>
		SaveModel(AccessoryModel model) : bool
		// IMPLEMENTATION
		LoadRecords()
		SynchRecordsToJsonFile()

	KittyAccessoryData
		// INTERFACE
		GetModels() : List<KittyAccessoryModel>
		SaveModel(KittyAccessoryModel model) : bool
		// IMPLEMENTATION
		LoadRecords()
		SynchRecordsToJsonFile()


	// Structs representing records.
	KittyModel
		string id
		string assetName
		bool isUnlocked
		bool isSelected

	AccessoryModel
		string id
		string assetName
		bool isUnlocked

	KittyAccessory
		string kittyId
		string accessoryId
		bool isSelected

	MazeProgressModel
		int currentProgress

	// Services for each entity type.
	// (maybe rethink whether they all need to be one-for-one of the struct classes)
	KittyService
		GetAllKitties() : List<KittyModel>
		GetSelectedKitty() : KittyModel
		SetSelectedKitty(KittyModel kitty) : bool

	AccessoryService
		GetAllAccessories() : List<AccessoryModel>
		GetSelectedAccessoriesForKitty(KittyModel kitty) : List<AccessoryModel>
		SetSelectedAccessoryForKitty(KittyModel kitty, AccessoryModel accessory) : bool

	KittyAccessoryService

	MazeProgressService
		GetMazeProgress() : MazeProgressModel
		SetMazeProgress(MazeProgressModel mazeProgress) : bool

